// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pkg/proto/notification_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendNotification_FullMethodName  = "/notification.NotificationService/SendNotification"
	NotificationService_VerifyDeviceToken_FullMethodName = "/notification.NotificationService/VerifyDeviceToken"
	NotificationService_RegisterDevice_FullMethodName    = "/notification.NotificationService/RegisterDevice"
	NotificationService_LinkDeviceToUser_FullMethodName  = "/notification.NotificationService/LinkDeviceToUser"
	NotificationService_UpdateDeviceToken_FullMethodName = "/notification.NotificationService/UpdateDeviceToken"
	NotificationService_GetDeliveryStatus_FullMethodName = "/notification.NotificationService/GetDeliveryStatus"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// Enviar notificación a un usuario
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	// Verificar token de dispositivo
	VerifyDeviceToken(ctx context.Context, in *VerifyDeviceTokenRequest, opts ...grpc.CallOption) (*VerifyDeviceTokenResponse, error)
	// Registrar un dispositivo para recibir notificaciones
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	// Vincular un dispositivo a un usuario
	LinkDeviceToUser(ctx context.Context, in *LinkDeviceToUserRequest, opts ...grpc.CallOption) (*LinkDeviceToUserResponse, error)
	// Actualizar token de notificación para un dispositivo
	UpdateDeviceToken(ctx context.Context, in *UpdateDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateDeviceTokenResponse, error)
	// Obtener el estado de entrega de una notificación
	GetDeliveryStatus(ctx context.Context, in *GetDeliveryStatusRequest, opts ...grpc.CallOption) (*GetDeliveryStatusResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) VerifyDeviceToken(ctx context.Context, in *VerifyDeviceTokenRequest, opts ...grpc.CallOption) (*VerifyDeviceTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyDeviceTokenResponse)
	err := c.cc.Invoke(ctx, NotificationService_VerifyDeviceToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, NotificationService_RegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) LinkDeviceToUser(ctx context.Context, in *LinkDeviceToUserRequest, opts ...grpc.CallOption) (*LinkDeviceToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkDeviceToUserResponse)
	err := c.cc.Invoke(ctx, NotificationService_LinkDeviceToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateDeviceToken(ctx context.Context, in *UpdateDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateDeviceTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeviceTokenResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateDeviceToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetDeliveryStatus(ctx context.Context, in *GetDeliveryStatusRequest, opts ...grpc.CallOption) (*GetDeliveryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeliveryStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetDeliveryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	// Enviar notificación a un usuario
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	// Verificar token de dispositivo
	VerifyDeviceToken(context.Context, *VerifyDeviceTokenRequest) (*VerifyDeviceTokenResponse, error)
	// Registrar un dispositivo para recibir notificaciones
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	// Vincular un dispositivo a un usuario
	LinkDeviceToUser(context.Context, *LinkDeviceToUserRequest) (*LinkDeviceToUserResponse, error)
	// Actualizar token de notificación para un dispositivo
	UpdateDeviceToken(context.Context, *UpdateDeviceTokenRequest) (*UpdateDeviceTokenResponse, error)
	// Obtener el estado de entrega de una notificación
	GetDeliveryStatus(context.Context, *GetDeliveryStatusRequest) (*GetDeliveryStatusResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) VerifyDeviceToken(context.Context, *VerifyDeviceTokenRequest) (*VerifyDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDeviceToken not implemented")
}
func (UnimplementedNotificationServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedNotificationServiceServer) LinkDeviceToUser(context.Context, *LinkDeviceToUserRequest) (*LinkDeviceToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkDeviceToUser not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateDeviceToken(context.Context, *UpdateDeviceTokenRequest) (*UpdateDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceToken not implemented")
}
func (UnimplementedNotificationServiceServer) GetDeliveryStatus(context.Context, *GetDeliveryStatusRequest) (*GetDeliveryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryStatus not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_VerifyDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).VerifyDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_VerifyDeviceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).VerifyDeviceToken(ctx, req.(*VerifyDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_LinkDeviceToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkDeviceToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).LinkDeviceToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_LinkDeviceToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).LinkDeviceToUser(ctx, req.(*LinkDeviceToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateDeviceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateDeviceToken(ctx, req.(*UpdateDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetDeliveryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetDeliveryStatus(ctx, req.(*GetDeliveryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "VerifyDeviceToken",
			Handler:    _NotificationService_VerifyDeviceToken_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _NotificationService_RegisterDevice_Handler,
		},
		{
			MethodName: "LinkDeviceToUser",
			Handler:    _NotificationService_LinkDeviceToUser_Handler,
		},
		{
			MethodName: "UpdateDeviceToken",
			Handler:    _NotificationService_UpdateDeviceToken_Handler,
		},
		{
			MethodName: "GetDeliveryStatus",
			Handler:    _NotificationService_GetDeliveryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/notification_service.proto",
}
